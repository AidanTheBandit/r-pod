"""
Audio Streaming Service v2.0
Handles YouTube audio streaming using yt-dlp with cookie authentication
"""
import logging
from typing import Dict, Any, Optional
import yt_dlp
import os
import tempfile

logger = logging.getLogger(__name__)

class AudioStreamingService:
    """Service for streaming YouTube audio with cookie authentication"""
    
    def __init__(self, cookie: Optional[str] = None):
        """
        Initialize the audio streaming service
        
        Args:
            cookie: YouTube Music cookie string for authentication
        """
        self.cache = {}
        self.cookie = cookie
        self.cookie_file = None
        
        if self.cookie:
            self._create_cookie_file()
    
    def _create_cookie_file(self):
        """Create a temporary cookie file for yt-dlp in Netscape format"""
        try:
            self.cookie_file = tempfile.NamedTemporaryFile(
                mode='w', 
                suffix='.txt',
                delete=False
            )
            
            # Write Netscape cookie header
            self.cookie_file.write("# Netscape HTTP Cookie File\n")
            self.cookie_file.write("# This file is generated by yt-dlp.  Do not edit.\n\n")
            
            # Parse cookie string and write in proper Netscape format
            cookie_pairs = self.cookie.split('; ')
            
            for pair in cookie_pairs:
                if '=' in pair:
                    name, value = pair.split('=', 1)
                    
                    # Determine if this is a secure cookie
                    is_secure = name.startswith('__Secure-') or name.startswith('__Host-')
                    secure_flag = 'TRUE' if is_secure else 'FALSE'
                    
                    # Set expiration far in the future (10 years)
                    expiration = '2000000000'
                    
                    # Write for both youtube.com and music.youtube.com
                    self.cookie_file.write(
                        f".youtube.com\tTRUE\t/\t{secure_flag}\t{expiration}\t{name}\t{value}\n"
                    )
                    self.cookie_file.write(
                        f".music.youtube.com\tTRUE\t/\t{secure_flag}\t{expiration}\t{name}\t{value}\n"
                    )
            
            self.cookie_file.close()
            logger.info(f"[AudioStream] Created cookie file with {len(cookie_pairs)} cookies")
            
        except Exception as e:
            logger.error(f"[AudioStream] Failed to create cookie file: {e}")
            self.cookie_file = None
    
    async def get_stream_url(self, video_id: str) -> Optional[Dict[str, Any]]:
        """
        Get the direct stream URL for a YouTube video with multiple fallback strategies
        
        Args:
            video_id: YouTube video ID
            
        Returns:
            Dictionary with stream info or None
        """
        # Try multiple strategies in order of preference
        strategies = [
            self._try_youtube_music_url,
            self._try_youtube_url_authenticated,
            self._try_youtube_url_no_auth,
            self._try_basic_extraction
        ]
        
        for i, strategy in enumerate(strategies, 1):
            try:
                logger.info(f"[AudioStream] Strategy {i}: Trying {strategy.__name__} for {video_id}")
                result = await strategy(video_id)
                if result:
                    return result
            except Exception as e:
                logger.warning(f"[AudioStream] Strategy {i} failed: {e}")
                continue
        
        logger.error(f"[AudioStream] All strategies failed for {video_id}")
        return None
    
    async def _try_youtube_music_url(self, video_id: str) -> Optional[Dict[str, Any]]:
        """Try YouTube Music URL with authentication"""
        if not self.cookie_file:
            raise Exception("No cookie file available")
        
        ydl_opts = {
            'format': 'bestaudio[ext=m4a]/bestaudio[ext=webm]/bestaudio/best[height<=720]',
            'quiet': True,
            'no_warnings': True,
            'cookiefile': self.cookie_file.name,
            'extract_flat': False,
            'ignoreerrors': False,
            'http_headers': {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Referer': 'https://music.youtube.com/',
            },
        }
        
        url = f"https://music.youtube.com/watch?v={video_id}"
        return await self._extract_with_opts(url, ydl_opts, "Music URL (authenticated)")
    
    async def _try_youtube_url_authenticated(self, video_id: str) -> Optional[Dict[str, Any]]:
        """Try regular YouTube URL with authentication"""
        if not self.cookie_file:
            raise Exception("No cookie file available")
        
        ydl_opts = {
            'format': 'bestaudio[ext=m4a]/bestaudio[ext=webm]/bestaudio/best[height<=720]/best',
            'quiet': True,
            'no_warnings': True,
            'cookiefile': self.cookie_file.name,
            'extract_flat': False,
            'ignoreerrors': False,
            'http_headers': {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Referer': 'https://www.youtube.com/',
            },
        }
        
        url = f"https://www.youtube.com/watch?v={video_id}"
        return await self._extract_with_opts(url, ydl_opts, "YouTube URL (authenticated)")
    
    async def _try_youtube_url_no_auth(self, video_id: str) -> Optional[Dict[str, Any]]:
        """Try regular YouTube URL without authentication"""
        ydl_opts = {
            'format': 'bestaudio/best[height<=480]/worst',
            'quiet': True,
            'no_warnings': True,
            'extract_flat': False,
            'ignoreerrors': False,
            'age_limit': None,
            'http_headers': {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            },
        }
        
        url = f"https://www.youtube.com/watch?v={video_id}"
        return await self._extract_with_opts(url, ydl_opts, "YouTube URL (no auth)")
    
    async def _try_basic_extraction(self, video_id: str) -> Optional[Dict[str, Any]]:
        """Try most basic extraction possible"""
        ydl_opts = {
            'format': 'worst/best',
            'quiet': False,  # Enable output to see what's happening
            'extract_flat': False,
            'ignoreerrors': True,
            'no_check_certificate': True,
        }
        
        url = f"https://www.youtube.com/watch?v={video_id}"
        return await self._extract_with_opts(url, ydl_opts, "Basic extraction")
    
    async def _extract_with_opts(self, url: str, ydl_opts: dict, strategy_name: str) -> Optional[Dict[str, Any]]:
        """Common extraction logic"""
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                
                if not info:
                    raise Exception(f"No info returned")
                
                # Get the stream URL
                stream_url = info.get('url')
                
                if stream_url:
                    logger.info(f"[AudioStream] ✓ {strategy_name} success - format: {info.get('format_id')}, ext: {info.get('ext')}")
                    
                    return {
                        'url': stream_url,
                        'format_id': info.get('format_id'),
                        'ext': info.get('ext'),
                        'bitrate': info.get('abr') or info.get('tbr'),
                        'duration': info.get('duration'),
                        'title': info.get('title'),
                        'strategy': strategy_name
                    }
                
                # Try to extract from formats manually
                formats = info.get('formats', [])
                if formats:
                    # Get the first available format with a URL
                    for fmt in formats:
                        if fmt.get('url'):
                            logger.info(f"[AudioStream] ✓ {strategy_name} success (manual format selection) - format: {fmt.get('format_id')}")
                            return {
                                'url': fmt['url'],
                                'format_id': fmt.get('format_id'),
                                'ext': fmt.get('ext'),
                                'bitrate': fmt.get('abr') or fmt.get('tbr'),
                                'duration': info.get('duration'),
                                'title': info.get('title'),
                                'strategy': strategy_name
                            }
                
                raise Exception("No stream URL found in any format")
                
        except yt_dlp.DownloadError as e:
            if "Requested format is not available" in str(e):
                # Try to get ANY available format
                logger.warning(f"[AudioStream] {strategy_name}: Format not available, trying list-formats approach")
                return await self._try_any_format(url, strategy_name)
            raise e
    
    async def _try_any_format(self, url: str, strategy_name: str) -> Optional[Dict[str, Any]]:
        """Last resort: try to get any available format"""
        try:
            ydl_opts = {
                'quiet': True,
                'listformats': True,
                'no_warnings': True,
            }
            
            if self.cookie_file:
                ydl_opts['cookiefile'] = self.cookie_file.name
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                
                formats = info.get('formats', [])
                if not formats:
                    raise Exception("No formats available")
                
                # Try each format until one works
                for fmt in formats:
                    if fmt.get('acodec') != 'none':  # Has audio
                        try:
                            format_id = fmt.get('format_id')
                            ydl_opts_single = {
                                'format': format_id,
                                'quiet': True,
                                'no_warnings': True,
                            }
                            
                            if self.cookie_file:
                                ydl_opts_single['cookiefile'] = self.cookie_file.name
                            
                            with yt_dlp.YoutubeDL(ydl_opts_single) as ydl_single:
                                info_single = ydl_single.extract_info(url, download=False)
                                
                                if info_single and info_single.get('url'):
                                    logger.info(f"[AudioStream] ✓ {strategy_name} success with format {format_id}")
                                    return {
                                        'url': info_single['url'],
                                        'format_id': format_id,
                                        'ext': info_single.get('ext'),
                                        'bitrate': info_single.get('abr') or info_single.get('tbr'),
                                        'duration': info_single.get('duration'),
                                        'title': info_single.get('title'),
                                        'strategy': f"{strategy_name} (format {format_id})"
                                    }
                        except Exception as e:
                            logger.debug(f"[AudioStream] Format {format_id} failed: {e}")
                            continue
                
                raise Exception("No working format found")
                
        except Exception as e:
            logger.error(f"[AudioStream] Any-format fallback failed: {e}")
            return None
    
    def __del__(self):
        """Cleanup cookie file on deletion"""
        if self.cookie_file and os.path.exists(self.cookie_file.name):
            try:
                os.unlink(self.cookie_file.name)
                logger.info(f"[AudioStream] Cleaned up cookie file")
            except Exception as e:
                logger.error(f"[AudioStream] Failed to cleanup cookie file: {e}")
