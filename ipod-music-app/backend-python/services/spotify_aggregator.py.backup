"""
Spotify Service Aggregator
"""
from typing import List, Dict, Any, Optional
import logging
import spotipy
from spotipy.oauth2 import SpotifyOAuth

from .base_music_service import BaseMusicService

logger = logging.getLogger(__name__)


class SpotifyAggregator(BaseMusicService):
    """Spotify service aggregator"""
    
    def __init__(self, credentials: Dict[str, Any]):
        super().__init__(credentials)
        self.sp: Optional[spotipy.Spotify] = None
        self.client_id = credentials.get("clientId")
        self.client_secret = credentials.get("clientSecret")
        self.redirect_uri = credentials.get("redirectUri")
        self.access_token = credentials.get("accessToken")
        self.refresh_token = credentials.get("refreshToken")
    
    async def authenticate(self) -> bool:
        """Authenticate with Spotify"""
        try:
            logger.info("[Spotify] Authenticating...")
            
            if self.access_token:
                # Use existing access token
                self.sp = spotipy.Spotify(auth=self.access_token)
            elif self.refresh_token:
                # Use OAuth with refresh token
                auth_manager = SpotifyOAuth(
                    client_id=self.client_id,
                    client_secret=self.client_secret,
                    redirect_uri=self.redirect_uri,
                )
                self.sp = spotipy.Spotify(auth_manager=auth_manager)
            else:
                logger.error("[Spotify] No access token or refresh token provided")
                return False
            
            # Test authentication
            await self._run_sync(self.sp.current_user)
            self.is_authenticated = True
            logger.info("[Spotify] ✓ Authentication successful")
            return True
            
        except Exception as e:
            logger.error(f"[Spotify] Authentication failed: {e}")
            self.is_authenticated = False
            return False
    
    async def _run_sync(self, func, *args, **kwargs):
        """Helper to run synchronous spotipy calls"""
        import asyncio
        return await asyncio.get_event_loop().run_in_executor(
            None, lambda: func(*args, **kwargs)
        )
    
    async def get_tracks(self) -> List[Dict[str, Any]]:
        """Get saved tracks"""
        if not self.is_authenticated:
            await self.authenticate()
        
        tracks = []
        
        try:
            logger.info("[Spotify] Fetching saved tracks")
            results = await self._run_sync(
                self.sp.current_user_saved_tracks,
                limit=50
            )
            
            for item in results["items"]:
                track = item["track"]
                tracks.append({
                    "id": f"spotify:{track['id']}",
                    "title": track["name"],
                    "artist": track["artists"][0]["name"] if track["artists"] else "Unknown",
                    "album": track["album"]["name"],
                    "duration": track["duration_ms"] // 1000,
                    "albumArt": track["album"]["images"][0]["url"] if track["album"]["images"] else None,
                    "streamUrl": track.get("preview_url"),
                    "service": "spotify"
                })
            
            logger.info(f"[Spotify] ✓ Returning {len(tracks)} tracks")
            
        except Exception as e:
            logger.error(f"[Spotify] Error getting tracks: {e}")
        
        return tracks
    
    async def get_albums(self, album_type: str = "user") -> List[Dict[str, Any]]:
        """Get albums"""
        if not self.is_authenticated:
            await self.authenticate()
        
        albums = []
        
        try:
            logger.info(f"[Spotify] Fetching {album_type} albums")
            results = await self._run_sync(
                self.sp.current_user_saved_albums,
                limit=50
            )
            
            for item in results["items"]:
                album = item["album"]
                albums.append({
                    "id": f"spotify:{album['id']}",
                    "title": album["name"],
                    "artist": album["artists"][0]["name"] if album["artists"] else "Unknown",
                    "year": album["release_date"][:4] if album.get("release_date") else None,
                    "coverArt": album["images"][0]["url"] if album["images"] else None,
                    "trackCount": album["total_tracks"],
                    "service": "spotify"
                })
            
            logger.info(f"[Spotify] ✓ Returning {len(albums)} albums")
            
        except Exception as e:
            logger.error(f"[Spotify] Error getting albums: {e}")
        
        return albums
    
    async def get_playlists(self) -> List[Dict[str, Any]]:
        """Get playlists"""
        if not self.is_authenticated:
            await self.authenticate()
        
        playlists = []
        
        try:
            logger.info("[Spotify] Fetching playlists")
            results = await self._run_sync(
                self.sp.current_user_playlists,
                limit=50
            )
            
            for playlist in results["items"]:
                playlists.append({
                    "id": f"spotify:{playlist['id']}",
                    "name": playlist["name"],
                    "title": playlist["name"],
                    "description": playlist.get("description", ""),
                    "trackCount": playlist["tracks"]["total"],
                    "coverArt": playlist["images"][0]["url"] if playlist["images"] else None,
                    "service": "spotify"
                })
            
            logger.info(f"[Spotify] ✓ Returning {len(playlists)} playlists")
            
        except Exception as e:
            logger.error(f"[Spotify] Error getting playlists: {e}")
        
        return playlists
    
    async def get_artists(self, artist_type: str = "user") -> List[Dict[str, Any]]:
        """Get followed artists"""
        if not self.is_authenticated:
            await self.authenticate()
        
        artists = []
        
        try:
            logger.info("[Spotify] Fetching followed artists")
            results = await self._run_sync(
                self.sp.current_user_followed_artists,
                limit=50
            )
            
            for artist in results["artists"]["items"]:
                artists.append({
                    "id": f"spotify:{artist['id']}",
                    "name": artist["name"],
                    "image": artist["images"][0]["url"] if artist["images"] else None,
                    "service": "spotify"
                })
            
            logger.info(f"[Spotify] ✓ Returning {len(artists)} artists")
            
        except Exception as e:
            logger.error(f"[Spotify] Error getting artists: {e}")
        
        return artists
    
    async def search(self, query: str) -> List[Dict[str, Any]]:
        """Search Spotify"""
        if not self.is_authenticated:
            await self.authenticate()
        
        results = []
        
        try:
            logger.info(f"[Spotify] Searching: {query}")
            search_results = await self._run_sync(
                self.sp.search,
                q=query,
                type="track",
                limit=20
            )
            
            for track in search_results["tracks"]["items"]:
                results.append({
                    "id": f"spotify:{track['id']}",
                    "title": track["name"],
                    "artist": track["artists"][0]["name"] if track["artists"] else "Unknown",
                    "album": track["album"]["name"],
                    "duration": track["duration_ms"] // 1000,
                    "albumArt": track["album"]["images"][0]["url"] if track["album"]["images"] else None,
                    "streamUrl": track.get("preview_url"),
                    "service": "spotify",
                    "type": "song"
                })
            
            logger.info(f"[Spotify] ✓ Found {len(results)} results")
            
        except Exception as e:
            logger.error(f"[Spotify] Search error: {e}")
        
        return results
    
    async def get_artist_albums(self, artist_id: str) -> List[Dict[str, Any]]:
        """Get albums for a specific artist"""
        if not self.is_authenticated:
            await self.authenticate()
        
        albums = []
        
        try:
            # Remove the spotify: prefix if present
            clean_artist_id = artist_id.replace("spotify:", "") if artist_id.startswith("spotify:") else artist_id
            
            logger.info(f"[Spotify] Getting albums for artist: {clean_artist_id}")
            
            results = await self._run_sync(
                self.sp.artist_albums,
                clean_artist_id,
                album_type="album",
                limit=20
            )
            
            for album in results["items"]:
                albums.append({
                    "id": f"spotify:{album['id']}",
                    "title": album["name"],
                    "artist": album["artists"][0]["name"] if album["artists"] else "Unknown",
                    "year": album["release_date"][:4] if album.get("release_date") else None,
                    "coverArt": album["images"][0]["url"] if album["images"] else None,
                    "trackCount": album["total_tracks"],
                    "service": "spotify"
                })
            
            logger.info(f"[Spotify] ✓ Found {len(albums)} albums for artist")
            
        except Exception as e:
            logger.error(f"[Spotify] Error getting artist albums: {e}")
        
        return albums

```<parameter name="oldString">        return results

```
